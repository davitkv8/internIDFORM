from django.db import models
from django.contrib.auth.models import User
from django.core.validators import MinLengthValidator, RegexValidator
from django.core.exceptions import ValidationError
from PIL import Image
from datetime import datetime, timedelta
from .countries import get_countries
from .mrz_generator import mrz


only_characters_validator = RegexValidator(r'^[a-zA-Z]*$', 'Only contains characters.')
document_id_validator = RegexValidator(r'^[0-9]*$', 'Invalid ID number.')
document_no_validator = RegexValidator(r'^[0-9A-Z]*$', 'Document No is not valid.')
citizenship_choices = get_countries()


class UsersID(models.Model):
    user = models.OneToOneField(User, null=False, on_delete=models.CASCADE)

    document_id = models.CharField(null=False, unique=True, max_length=11,
                                   validators=[MinLengthValidator(11),
                                               document_id_validator])

    document_no = models.CharField(null=False, unique=True, max_length=9,
                                   validators=[MinLengthValidator(9),
                                               document_no_validator])

    first_name = models.CharField(max_length=55, null=False,
                                  validators=[only_characters_validator])

    last_name = models.CharField(max_length=55, null=False,
                                 validators=[only_characters_validator])

    citizenship = models.CharField(blank=False, null=False, max_length=32,
                                   choices=citizenship_choices)

    birth_date = models.DateField(blank=False, null=False)
    date_of_issue = models.DateField(blank=False, null=False)
    date_expires = models.DateField(null=False)
    # date_expires field is muted from admin.py. for default, document expires after 4 or 10 years it's issued.
    # ex: date_of_issue = 10 september, 2020 -> date_expires = 10 september, 2024. (for under-age 18)
    #     date_of_issue = 10 september, 2020 -> date_expires = 10 september, 2030. (for adults)
    sex_choices = (
        ('', ''),
        ('Male', 'Male'),
        ('Female', 'Female')
    )
    sex = models.CharField(blank=False, null=False, max_length=55,
                                     default='', choices=sex_choices)
    image = models.ImageField(blank=False, null=False, upload_to='document_image')
    mrz = models.CharField(blank=False, null=False, unique=True, max_length=90)
    # mrz is also disabled from admin.py and it will be automatically generated by mrz_generator

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)      # document_image resolution
        img = Image.open(self.image.path)
        if img.height > 300:
            output_size = (300, 300)
            img.thumbnail(output_size)
            img.save(self.image.path)

    def clean(self):
        if self.birth_date and self.date_of_issue:
            if datetime.today().strftime('%Y-%m-%d') < self.birth_date.strftime('%Y-%m-%d'):
                raise ValidationError("Birth date is not valid.")

            if datetime.today().strftime('%Y-%m-%d') < self.date_of_issue.strftime('%Y-%m-%d'):
                raise ValidationError("Date of issue is not valid.")

            if self.birth_date.strftime('%Y-%m-%d') > self.date_of_issue.strftime('%Y-%m-%d'):
                raise ValidationError("Birth date or document issue date is filled incorrectly")

            else:
                if (self.date_of_issue - self.birth_date) > timedelta(days=18 * 365):
                    self.date_expires = self.date_of_issue.replace(year=self.date_of_issue.year+10)
                    # 10 years cycle
                else:
                    self.date_expires = self.date_of_issue.replace(year=self.date_of_issue.year+4)
                    # 4 years cycle

                self.mrz = mrz(self.citizenship, self.document_no, self.document_id, self.sex,
                               self.birth_date, self.date_expires, self.first_name, self.last_name)
        else:
            raise ValidationError("Please, fill in all required fields")

    def get_formatted_mrz(self):
        # just to render/print mrz code with better visualization
        return self.mrz[:30], self.mrz[30:60], self.mrz[60:90]
